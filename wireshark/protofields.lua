-- This file is auto-generated. Any hand edits will be overwritten!

local M = {}

M.message_kind = {}
M.message_kind.names = {
    [0] = "MgsRequest",
    [1] = "MgsResponse",
    [2] = "SpRequest",
    [3] = "SpResponse",
}
M.message_kind.handlers = {
    [0] = "dissect_mgs_request",
    [1] = "dissect_mgs_response",
    [2] = "dissect_sp_request",
    [3] = "dissect_sp_response",
}
M.message_kind.field = ProtoField.uint8(
    "mgs.message_kind",
    "MessageKind",
    base.DEC,
    M.message_kind.names
)

M.mgs_error = {}
M.mgs_error.names = {
    [0] = "BadRequest",
    [1] = "HostPhase2Unavailable",
    [2] = "HostPhase2ImageBadOffset",
}
M.mgs_error.handlers = {
    [0] = "dissect_bad_request",
    [1] = "dissect_host_phase2_unavailable",
    [2] = "dissect_host_phase2_image_bad_offset",
}
M.mgs_error.field = ProtoField.uint8(
    "mgs.mgs_error",
    "MgsError",
    base.DEC,
    M.mgs_error.names
)

M.mgs_request = {}
M.mgs_request.names = {
    [0] = "Discover",
    [1] = "IgnitionState",
    [2] = "BulkIgnitionState",
    [3] = "IgnitionCommand",
    [4] = "SpState",
    [5] = "SerialConsoleAttach",
    [6] = "SerialConsoleWrite",
    [7] = "SerialConsoleDetach",
    [8] = "SpUpdatePrepare",
    [9] = "ComponentUpdatePrepare",
    [10] = "UpdateChunk",
    [11] = "UpdateStatus",
    [12] = "UpdateAbort",
    [13] = "GetPowerState",
    [14] = "SetPowerState",
    [15] = "ResetPrepare",
    [16] = "ResetTrigger",
    [17] = "Inventory",
    [18] = "GetStartupOptions",
    [19] = "SetStartupOptions",
    [20] = "ComponentDetails",
    [21] = "IgnitionLinkEvents",
    [22] = "BulkIgnitionLinkEvents",
    [23] = "ClearIgnitionLinkEvents",
    [24] = "ComponentClearStatus",
    [25] = "ComponentGetActiveSlot",
    [26] = "ComponentSetActiveSlot",
    [27] = "SerialConsoleBreak",
    [28] = "SendHostNmi",
    [29] = "SetIpccKeyLookupValue",
    [30] = "ComponentSetAndPersistActiveSlot",
    [31] = "ReadCaboose",
    [32] = "SerialConsoleKeepAlive",
    [33] = "ResetComponentPrepare",
    [34] = "ResetComponentTrigger",
    [35] = "SwitchDefaultImage",
    [36] = "ComponentAction",
    [37] = "ReadComponentCaboose",
    [38] = "ReadSensor",
    [39] = "CurrentTime",
    [40] = "ReadRot",
    [41] = "VpdLockState",
    [42] = "ResetComponentTriggerWithWatchdog",
    [43] = "DisableComponentWatchdog",
    [44] = "ComponentWatchdogSupported",
    [45] = "VersionedRotBootInfo",
    [46] = "Dump",
}
M.mgs_request.handlers = {
    [0] = "dissect_discover",
    [1] = "dissect_ignition_state",
    [2] = "dissect_bulk_ignition_state",
    [3] = "dissect_ignition_command",
    [4] = "dissect_sp_state",
    [5] = "dissect_serial_console_attach",
    [6] = "dissect_serial_console_write",
    [7] = "dissect_serial_console_detach",
    [8] = "dissect_sp_update_prepare",
    [9] = "dissect_component_update_prepare",
    [10] = "dissect_update_chunk",
    [11] = "dissect_update_status",
    [12] = "dissect_update_abort",
    [13] = "dissect_get_power_state",
    [14] = "dissect_set_power_state",
    [15] = "dissect_reset_prepare",
    [16] = "dissect_reset_trigger",
    [17] = "dissect_inventory",
    [18] = "dissect_get_startup_options",
    [19] = "dissect_set_startup_options",
    [20] = "dissect_component_details",
    [21] = "dissect_ignition_link_events",
    [22] = "dissect_bulk_ignition_link_events",
    [23] = "dissect_clear_ignition_link_events",
    [24] = "dissect_component_clear_status",
    [25] = "dissect_component_get_active_slot",
    [26] = "dissect_component_set_active_slot",
    [27] = "dissect_serial_console_break",
    [28] = "dissect_send_host_nmi",
    [29] = "dissect_set_ipcc_key_lookup_value",
    [30] = "dissect_component_set_and_persist_active_slot",
    [31] = "dissect_read_caboose",
    [32] = "dissect_serial_console_keep_alive",
    [33] = "dissect_reset_component_prepare",
    [34] = "dissect_reset_component_trigger",
    [35] = "dissect_switch_default_image",
    [36] = "dissect_component_action",
    [37] = "dissect_read_component_caboose",
    [38] = "dissect_read_sensor",
    [39] = "dissect_current_time",
    [40] = "dissect_read_rot",
    [41] = "dissect_vpd_lock_state",
    [42] = "dissect_reset_component_trigger_with_watchdog",
    [43] = "dissect_disable_component_watchdog",
    [44] = "dissect_component_watchdog_supported",
    [45] = "dissect_versioned_rot_boot_info",
    [46] = "dissect_dump",
}
M.mgs_request.field = ProtoField.uint8(
    "mgs.mgs_request",
    "MgsRequest",
    base.DEC,
    M.mgs_request.names
)

M.mgs_response = {}
M.mgs_response.names = {
    [0] = "Error",
    [1] = "HostPhase2Data",
}
M.mgs_response.handlers = {
    [0] = "dissect_error",
    [1] = "dissect_host_phase2_data",
}
M.mgs_response.field = ProtoField.uint8(
    "mgs.mgs_response",
    "MgsResponse",
    base.DEC,
    M.mgs_response.names
)

M.sp_error = {}
M.sp_error.names = {
    [0] = "Busy",
    [1] = "BadRequest",
    [2] = "RequestUnsupportedForSp",
    [3] = "RequestUnsupportedForComponent",
    [4] = "Ignition",
    [5] = "SerialConsoleNotAttached",
    [6] = "SerialConsoleAlreadyAttached",
    [7] = "OtherComponentUpdateInProgress",
    [8] = "UpdateNotPrepared",
    [9] = "InvalidUpdateId",
    [10] = "UpdateInProgress",
    [11] = "InvalidUpdateChunk",
    [12] = "UpdateFailed",
    [13] = "UpdateSlotBusy",
    [14] = "PowerStateError",
    [15] = "ResetTriggerWithoutPrepare",
    [16] = "InvalidSlotForComponent",
    [17] = "ComponentOperationFailed",
    [18] = "UpdateIsTooLarge",
    [19] = "SetIpccKeyLookupValueFailed",
    [20] = "NoCaboose",
    [21] = "NoSuchCabooseKey",
    [22] = "CabooseValueOverflow",
    [23] = "CabooseReadError",
    [24] = "BadCabooseChecksum",
    [25] = "ImageBoardUnknown",
    [26] = "ImageBoardMismatch",
    [27] = "ResetComponentTriggerWithoutPrepare",
    [28] = "SwitchDefaultImageError",
    [29] = "Sprot",
    [30] = "Spi",
    [31] = "Sprockets",
    [32] = "Update",
    [33] = "Sensor",
    [34] = "Vpd",
    [35] = "Watchdog",
    [36] = "Monorail",
    [37] = "Dump",
}
M.sp_error.handlers = {
    [0] = "dissect_busy",
    [1] = "dissect_bad_request",
    [2] = "dissect_request_unsupported_for_sp",
    [3] = "dissect_request_unsupported_for_component",
    [4] = "dissect_ignition",
    [5] = "dissect_serial_console_not_attached",
    [6] = "dissect_serial_console_already_attached",
    [7] = "dissect_other_component_update_in_progress",
    [8] = "dissect_update_not_prepared",
    [9] = "dissect_invalid_update_id",
    [10] = "dissect_update_in_progress",
    [11] = "dissect_invalid_update_chunk",
    [12] = "dissect_update_failed",
    [13] = "dissect_update_slot_busy",
    [14] = "dissect_power_state_error",
    [15] = "dissect_reset_trigger_without_prepare",
    [16] = "dissect_invalid_slot_for_component",
    [17] = "dissect_component_operation_failed",
    [18] = "dissect_update_is_too_large",
    [19] = "dissect_set_ipcc_key_lookup_value_failed",
    [20] = "dissect_no_caboose",
    [21] = "dissect_no_such_caboose_key",
    [22] = "dissect_caboose_value_overflow",
    [23] = "dissect_caboose_read_error",
    [24] = "dissect_bad_caboose_checksum",
    [25] = "dissect_image_board_unknown",
    [26] = "dissect_image_board_mismatch",
    [27] = "dissect_reset_component_trigger_without_prepare",
    [28] = "dissect_switch_default_image_error",
    [29] = "dissect_sprot",
    [30] = "dissect_spi",
    [31] = "dissect_sprockets",
    [32] = "dissect_update",
    [33] = "dissect_sensor",
    [34] = "dissect_vpd",
    [35] = "dissect_watchdog",
    [36] = "dissect_monorail",
    [37] = "dissect_dump",
}
M.sp_error.field = ProtoField.uint8(
    "mgs.sp_error",
    "SpError",
    base.DEC,
    M.sp_error.names
)

M.sp_request = {}
M.sp_request.names = {
    [0] = "SerialConsole",
    [1] = "HostPhase2Data",
}
M.sp_request.handlers = {
    [0] = "dissect_serial_console",
    [1] = "dissect_host_phase2_data",
}
M.sp_request.field = ProtoField.uint8(
    "mgs.sp_request",
    "SpRequest",
    base.DEC,
    M.sp_request.names
)

M.sp_response = {}
M.sp_response.names = {
    [0] = "Discover",
    [1] = "IgnitionState",
    [2] = "BulkIgnitionState",
    [3] = "IgnitionCommandAck",
    [4] = "SpState",
    [5] = "SpUpdatePrepareAck",
    [6] = "ComponentUpdatePrepareAck",
    [7] = "UpdateChunkAck",
    [8] = "UpdateStatus",
    [9] = "UpdateAbortAck",
    [10] = "SerialConsoleAttachAck",
    [11] = "SerialConsoleWriteAck",
    [12] = "SerialConsoleDetachAck",
    [13] = "PowerState",
    [14] = "PowerStateSet",
    [15] = "ResetPrepareAck",
    [16] = "Inventory",
    [17] = "Error",
    [18] = "StartupOptions",
    [19] = "SetStartupOptionsAck",
    [20] = "ComponentDetails",
    [21] = "IgnitionLinkEvents",
    [22] = "BulkIgnitionLinkEvents",
    [23] = "ClearIgnitionLinkEventsAck",
    [24] = "ComponentClearStatusAck",
    [25] = "ComponentActiveSlot",
    [26] = "ComponentSetActiveSlotAck",
    [27] = "SerialConsoleBreakAck",
    [28] = "SendHostNmiAck",
    [29] = "SetIpccKeyLookupValueAck",
    [30] = "ComponentSetAndPersistActiveSlotAck",
    [31] = "CabooseValue",
    [32] = "SerialConsoleKeepAliveAck",
    [33] = "ResetComponentPrepareAck",
    [34] = "ResetComponentTriggerAck",
    [35] = "SwitchDefaultImageAck",
    [36] = "ComponentActionAck",
    [37] = "SpStateV2",
    [38] = "ReadSensor",
    [39] = "CurrentTime",
    [40] = "ReadRot",
    [41] = "VpdLockState",
    [42] = "DisableComponentWatchdogAck",
    [43] = "ComponentWatchdogSupportedAck",
    [44] = "SpStateV3",
    [45] = "RotBootInfo",
    [46] = "ComponentAction",
    [47] = "Dump",
    [48] = "PowerStateUnchanged",
}
M.sp_response.handlers = {
    [0] = "dissect_discover",
    [1] = "dissect_ignition_state",
    [2] = "dissect_bulk_ignition_state",
    [3] = "dissect_ignition_command_ack",
    [4] = "dissect_sp_state",
    [5] = "dissect_sp_update_prepare_ack",
    [6] = "dissect_component_update_prepare_ack",
    [7] = "dissect_update_chunk_ack",
    [8] = "dissect_update_status",
    [9] = "dissect_update_abort_ack",
    [10] = "dissect_serial_console_attach_ack",
    [11] = "dissect_serial_console_write_ack",
    [12] = "dissect_serial_console_detach_ack",
    [13] = "dissect_power_state",
    [14] = "dissect_power_state_set",
    [15] = "dissect_reset_prepare_ack",
    [16] = "dissect_inventory",
    [17] = "dissect_error",
    [18] = "dissect_startup_options",
    [19] = "dissect_set_startup_options_ack",
    [20] = "dissect_component_details",
    [21] = "dissect_ignition_link_events",
    [22] = "dissect_bulk_ignition_link_events",
    [23] = "dissect_clear_ignition_link_events_ack",
    [24] = "dissect_component_clear_status_ack",
    [25] = "dissect_component_active_slot",
    [26] = "dissect_component_set_active_slot_ack",
    [27] = "dissect_serial_console_break_ack",
    [28] = "dissect_send_host_nmi_ack",
    [29] = "dissect_set_ipcc_key_lookup_value_ack",
    [30] = "dissect_component_set_and_persist_active_slot_ack",
    [31] = "dissect_caboose_value",
    [32] = "dissect_serial_console_keep_alive_ack",
    [33] = "dissect_reset_component_prepare_ack",
    [34] = "dissect_reset_component_trigger_ack",
    [35] = "dissect_switch_default_image_ack",
    [36] = "dissect_component_action_ack",
    [37] = "dissect_sp_state_v2",
    [38] = "dissect_read_sensor",
    [39] = "dissect_current_time",
    [40] = "dissect_read_rot",
    [41] = "dissect_vpd_lock_state",
    [42] = "dissect_disable_component_watchdog_ack",
    [43] = "dissect_component_watchdog_supported_ack",
    [44] = "dissect_sp_state_v3",
    [45] = "dissect_rot_boot_info",
    [46] = "dissect_component_action",
    [47] = "dissect_dump",
    [48] = "dissect_power_state_unchanged",
}
M.sp_response.field = ProtoField.uint8(
    "mgs.sp_response",
    "SpResponse",
    base.DEC,
    M.sp_response.names
)

return M
