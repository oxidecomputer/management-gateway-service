// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

// Copyright 2025 Oxide Computer Company

use hubpack::SerializedSize;
use serde::Deserialize;
use serde::Serialize;

// N.B.: it would be nice to reuse the `Ena` type defined in `ereport-types` in
// the Omicron repo for this, but I'm not sure if it's Considered Good to have
// dependencies on omicron in this repo...
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
#[repr(transparent)]
pub struct Ena(pub u64);

// N.B.: it would be nice to reuse the `EreporterGenerationUuid` type defined in
// `ereport-types` in the Omicron repo for this, but that wraps a `Uuid`, which
// lacks impls for traits like `SerializedSize`, and I'm not sure if it's
// considered okay to have dependencies on omicron in this repo...
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
#[repr(transparent)]
pub struct RestartId(pub u128);

/// A versioned request for ereports aggregated by the SP's snitch task.
///
/// See [RFD 545 §4.4.3.1] for details.
/// [RFD 545 §4.4.3.1]: https://rfd.shared.oxide.computer/rfd/0545#_requestcommit
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
pub enum EreportRequest {
    // /!\ ORDER MATTERS /!\
    V0(EreportRequestV0),
}

/// A request for ereports aggregated by the SP's snitch task, version 0.
///
/// ```text
///     0         1        2        3
/// +--------+--------+--------+--------+
/// | version|-------C|    unused       |
/// +--------+--------+--------+--------+
/// |                                   |
/// +                                   +
/// |                                   |
/// +       restart ID (128 bits)       +
/// |                                   |
/// +                                   +
/// |                                   |
/// +--------+--------+--------+--------+
/// |                                   |
/// +   first ENA desired in response   +
/// |                                   |
/// +--------+--------+--------+--------+
/// |                                   |
/// +   last ENA written to database    + only present when C bit set
/// |                                   |
/// +--------+--------+--------+--------+
/// ```
///
/// See [RFD 545 §4.4.3.1] for details.
/// [RFD 545 §4.4.3.1]: https://rfd.shared.oxide.computer/rfd/0545#_requestcommit
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
pub struct EreportRequestV0 {
    pub flags: EreportRequestFlags,

    /// Currently unused as of this protocol version.
    _reserved: [u8; 2],

    /// The restart ID of the SP's snitch task which the control plane believes
    /// is current.
    ///
    /// If this value does not match the reporter's current restart ID, the
    /// reporter's response will include the current restart ID, and will start
    /// at the earliest known ENA, rather than the provided `start_ena`.
    ///
    /// If the control plane does not know the SP's restart ID, this will be 0. IDs
    /// generated by the snitch task on startup must not be 0.
    pub restart_id: RestartId,

    /// If present, the snitch should not include ENAs earlier than this one
    /// in its response, provided that the requested reporter generation matches
    /// the current generation.
    pub start_ena: Ena,

    /// The ENA of the last ereport committed to persistent storage from the
    /// requested reporter restart.
    ///
    /// If the restart ID parameter matches the reporter's current restart,
    /// it is permitted to discard any ereports with ENAs up to and including
    /// this value. If the restart ID has changed from the provided one, the
    /// reporter will not discard data.
    ///
    /// This value is only present if the [`EreportRequestFlags::COMMIT`] bit is
    /// set.
    pub committed_ena: Ena,
}

/// Flags for [`EreportRequest`] packets.
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
#[repr(transparent)]
pub struct EreportRequestFlags(u8);

bitflags::bitflags! {
    impl EreportRequestFlags: u8 {
        /// Indicates that a "committed ENA" field is present in this request.
        ///
        /// If this is not set, the "committed ENA" field will be zero, but this
        /// does not indicate that ENA 0 has been committed.
        const COMMIT = 1 << 0;
    }
}

impl EreportRequestV0 {
    pub const fn new(
        restart_id: RestartId,
        start_ena: Ena,
        committed_ena: Option<Ena>,
    ) -> Self {
        let (committed_ena, flags) = match committed_ena {
            Some(ena) => (ena, EreportRequestFlags::COMMIT),
            None => (Ena(0), EreportRequestFlags::empty()),
        };
        Self {
            flags,
            _reserved: [0u8; 2],
            restart_id,
            start_ena,
            committed_ena,
        }
    }
}

/// A versioned header for the response to an [`EreportRequest`].
///
/// See [RFD 545 §4.4.3.1] for details.
/// [RFD 545 §4.4.3.1]: https://rfd.shared.oxide.computer/rfd/0545#_requestcommit
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
pub enum EreportHeader {
    // /!\ ORDER MATTERS /!\
    V0(EreportHeaderV0),
}

/// Header for responses to [`EreportRequestV0`]s.
///
/// ```text
///     0         1        2        3
/// +--------+--------+--------+--------+
/// | version|  kind  |     unused      |
/// +--------+--------+--------+--------+
/// |                                   |
/// +                                   +
/// |                                   |
/// +       restart ID (128 bits)       +
/// |                                   |
/// +                                   +
/// |                                   |
/// +--------+--------+--------+--------+ past this line, only present
///  ~~~ trailing data ~~~                when kind > 0
///   |
///   +--> if kind == 1:
///   |    +--------+--------+--------+--------+
///   |    |                                   |
///   |    +   ENA of first record below       +
///   |    |                                   |
///   |    +--------+--------+--------+--------+
///   |    |                                   |
///   |    :   zero or more bytes of data,     :
///   |    :   continuing to end of packet     :
///   |    :                                   :
///   |    |                                   |
///   |    +--------+--------+--------+--------+
///   |
///   +--> if kind == 2:
///        +--------+--------+--------+--------+
///        |                                   |
///        :   CBOR fragment of metadata to    :
///        :   append to subsequent ereports   :
///        :                                   :
///        |                                   |
///        +--------+--------+--------+--------+
/// ```
///
/// See [RFD 545 §4.4.4] for details.
/// [RFD 545 §4.4.4]: https://rfd.shared.oxide.computer/rfd/0545#_readresponse
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
pub struct EreportHeaderV0 {
    pub kind: EreportResponseKind,

    /// Currently unused as of this protocol version.
    _reserved: [u8; 2],

    /// The reporter restart ID of the SP's snitch task when this response was
    /// produced.
    pub restart_id: RestartId,
}

impl EreportHeaderV0 {
    pub const fn new_data(restart_id: RestartId) -> Self {
        Self { kind: EreportResponseKind::Data, _reserved: [0; 2], restart_id }
    }

    pub const fn new_empty(restart_id: RestartId) -> Self {
        Self { kind: EreportResponseKind::Empty, _reserved: [0; 2], restart_id }
    }

    pub const fn new_restarted(restart_id: RestartId) -> Self {
        Self {
            kind: EreportResponseKind::Restarted,
            _reserved: [0; 2],
            restart_id,
        }
    }
}

/// Flags for [`EreportRequest`] packets.
#[derive(
    Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, SerializedSize,
)]
#[repr(u8)]
pub enum EreportResponseKind {
    // /!\ ORDER MATTERS HERE TOO /!\
    /// The requested restart ID is still current, but there are no new ereports
    /// with which to respond. In this case, the packet's trailing data is
    /// empty.
    Empty,
    /// The requested restart ID is still current, and there are new ereports
    /// with ENAs greater than the last seen ENA provided in the request.
    ///
    /// In this case, the packet's trailing data will consist of the first ENA
    /// in the response, followed by a CBOR list containing responsive ereports
    /// up to the maximum size of the packet.
    Data,
    /// The requested restart ID is no longer current.
    ///
    /// The trailing data of this packet will consist of a CBOR map fragment
    /// containing metadata which should be appended to all subsequent ereports
    /// received from this SP, as long as the restart ID remains the same.
    Restarted,
}
